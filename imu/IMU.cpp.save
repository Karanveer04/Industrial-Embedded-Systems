#include "cluon/OD4Session.hpp"
#include <stdint.h>
#include <iostream>
#include "cluon/Envelope.hpp"
#include "messages.odvd"
#include <math.h>
#include <rc_usefulincludes.h>
#include <roboticscape.h>

int main() {

    	uint8_t distanceTraveled = 0;
	float initial_speed = 0.0;
	float distance = 0; 
	float speed = 0;
	float time = 0.01;
	float sample = 0.01;
    	
	
readIMU msg;
    	rc_imu_data_t data;
     	rc_imu_config_t conf = rc_default_imu_config();

    	// Instantiate a OD4Session object
    	cluon::OD4Session od4(230,[&readIMU](cluon::data::Envelope &&envelope) noexcept {
                              if (envelope.dataType() == 5000) {
                                  readIMU readmsg = cluon::extractMessage<IMU>(std::move(envelope));
                              }
                          });

    	//terminate in case no OD4 session running
    	if(od4.isRunning() == 0)
    	{
        	std::cout << "ERROR: No od4 running!!!" << std::endl;       	
		return -1;
    	}

    	// initialize hardware first
    	if(rc_initialize()){
        	std::cout << "ERROR: failed to run rc_initialize(), are you root?\n"<< std::endl;
        	return -1;
    	}
	    	
	if(rc_initialize_imu(&data, conf)){
        	std::cout << "rc_initialize_imu_failed\n"<< std::endl;
        	return -1;
    	}
	
	while (od4.isRunning()) {

        	while (rc_get_state() != EXITING) {

        		float x_accel = data.accel[1];
        		float y_accel = data.accel[2];

			float accel = pow(x_accel,2)+pow(y_accel,2);
			accel = sqrt(accel);
			initial_speed = speed;
			float vel = (accel * time);
			speed = (vel - initial_speed);
			speed = abs(speed);
			distance = ( speed * time)+((accel * pow(time,2)) /2);
			msg.Distance(distance);
			od4.send(msg);
        	}

    	}

    	rc_power_off_imu();
    	// exit cleanly
    	rc_cleanup();
    	return 0;
}
